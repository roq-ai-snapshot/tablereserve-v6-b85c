generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer_preference {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  preference    String     @db.VarChar(255)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar(255)
  owner_id   String       @db.Uuid
  user       user         @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant restaurant[]
}

model reservation {
  id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String             @db.Uuid
  restaurant_id         String             @db.Uuid
  table_availability_id String             @db.Uuid
  reservation_time      DateTime           @db.Timestamp(6)
  status                String             @db.VarChar(50)
  restaurant            restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table_availability    table_availability @relation(fields: [table_availability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurant {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(255)
  user_id             String                @db.Uuid
  organization_id     String                @db.Uuid
  customer_preference customer_preference[]
  reservation         reservation[]
  organization        organization          @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  table_availability  table_availability[]
}

model table_availability {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id    String        @db.Uuid
  capacity         Int
  available_tables Int
  reservation      reservation[]
  restaurant       restaurant    @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  customer_preference customer_preference[]
  organization        organization[]
  reservation         reservation[]
  restaurant          restaurant[]
}
